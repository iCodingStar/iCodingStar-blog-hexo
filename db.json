{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/next/source/404.html","path":"404.html","modified":1,"renderable":1},{"_id":"themes/next/source/about/index.html","path":"about/index.html","modified":1,"renderable":1},{"_id":"themes/next/source/categories/index.html","path":"categories/index.html","modified":1,"renderable":1},{"_id":"themes/next/source/tags/index.html","path":"tags/index.html","modified":1,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/uploads/avatar.jpg","path":"uploads/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"419f069afb14e8f8a8c1125d64e718ca2135a08e","modified":1490067263189},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1490067263240},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1490067263240},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1490067263242},{"_id":"themes/next/.gitignore","hash":"de5b9b9e5b313b4a86e805b02f334d35c87bfe56","modified":1490067263242},{"_id":"themes/next/.javascript_ignore","hash":"74b54cf920cbbf4038a68e54b7138af8b8f45588","modified":1490067263242},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1490067263244},{"_id":"themes/next/README.en.md","hash":"953873fe2ee79bfc567b16dcdf8f91c1410444f8","modified":1490067263245},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1490067263245},{"_id":"themes/next/_config.yml","hash":"c397b88ffcc4b5be55b2384284c1ae0e95b2d9f5","modified":1490072182927},{"_id":"themes/next/bower.json","hash":"bd70cf5988bbfc8cbcf13adae659151a55466524","modified":1490067263246},{"_id":"themes/next/gulpfile.coffee","hash":"e549561461642051d195550ec49d793e44ee22a0","modified":1490067263247},{"_id":"themes/next/package.json","hash":"48e2352f8e41f2b6bbf55254d10f3192ee206d5a","modified":1490067263305},{"_id":"themes/next/source/404.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490067263308},{"_id":"source/_posts/2017-02-18-读书笔记-c与指针.md","hash":"7fccdd218f61c3ba44eeb8620f9f9cb0950afdc3","modified":1490071869947},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"4312fb37fa2b8663006be3c4fe01125ec01171c1","modified":1490067263241},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"2692e36cc35b1594530981e7727771f601720a43","modified":1490067263241},{"_id":"themes/next/languages/de.yml","hash":"db6a9d669f4b6282cda6c0a2d4e03d3e308a4846","modified":1490067263247},{"_id":"themes/next/languages/default.yml","hash":"0a3672575cc99a77e413a45cd635ca2e096a176e","modified":1490067263247},{"_id":"themes/next/languages/en.yml","hash":"0a3672575cc99a77e413a45cd635ca2e096a176e","modified":1490067263248},{"_id":"themes/next/languages/fr-FR.yml","hash":"91cf55b9d75879e72c8008d2659fe2ea993a4cca","modified":1490067263248},{"_id":"themes/next/languages/id.yml","hash":"d8b9dc017da0be7f71fda1cacd8064cbc38963b9","modified":1490067263249},{"_id":"themes/next/languages/ja.yml","hash":"bc89436a2a015ef72f43f265e56e37d94e73c0cd","modified":1490067263249},{"_id":"themes/next/languages/ko.yml","hash":"c59676f2af80c3c594c34c4a0fcbf65fd8864ff3","modified":1490067263250},{"_id":"themes/next/languages/pt-BR.yml","hash":"4b91f96b07e05705b28964df7460466c9b522e2c","modified":1490067263250},{"_id":"themes/next/languages/pt.yml","hash":"f364905121a816c9797acce07c0a4f248965b29a","modified":1490067263251},{"_id":"themes/next/languages/ru.yml","hash":"40f4260866eab5c28ba715c3be495d7e81c73df7","modified":1490067263251},{"_id":"themes/next/languages/zh-Hans.yml","hash":"439c16c744b1596f24d9e0b4e230c4d3c93b7d85","modified":1490067263252},{"_id":"themes/next/languages/zh-hk.yml","hash":"a59f3f3114f5eb4d170a76da4359307e8f5159a7","modified":1490067263253},{"_id":"themes/next/languages/zh-tw.yml","hash":"18da1324d2212faca9a6e5e6ce98b419c86d4b0c","modified":1490067263253},{"_id":"themes/next/layout/_layout.swig","hash":"24de463d28bacbf2a28c34fecf082980f7f33a12","modified":1490067263256},{"_id":"themes/next/layout/category.swig","hash":"58cf08388901f7549b1fca95548b2c79173aa840","modified":1490067263304},{"_id":"themes/next/layout/index.swig","hash":"e5b52e04296203262a400e8e36ae12426d31fd5b","modified":1490067263304},{"_id":"themes/next/layout/page.swig","hash":"2a13804aa186f6062738d136e430870c53789bf4","modified":1490067263304},{"_id":"themes/next/layout/archive.swig","hash":"b867a08f6b43de8b5d700c84b943df55917407ae","modified":1490067263303},{"_id":"themes/next/layout/post.swig","hash":"b8334c479840b7724638eec71971cbd8512ae58d","modified":1490067263305},{"_id":"themes/next/layout/schedule.swig","hash":"595013860078799d455af4965b3a7c5c4fd3923c","modified":1490067263305},{"_id":"themes/next/layout/tag.swig","hash":"6f764ea3ab11eeb7c530df45528d449b14f5dc62","modified":1490067263305},{"_id":"themes/next/scripts/merge-configs.js","hash":"f8cde6953939802f92da5b7a2458c6c539e9be69","modified":1490067263306},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1490067263428},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1490067263428},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1490067263429},{"_id":"themes/next/source/about/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490067263309},{"_id":"themes/next/source/categories/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490067263309},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490067263349},{"_id":"themes/next/source/tags/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490067263427},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1490067263255},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1490067263255},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"6d40652784585d263c37b8a3723e43e04b926ca7","modified":1490067263257},{"_id":"themes/next/layout/_macro/post.swig","hash":"4cb9c43f883ad331527bb2446994eb24b2fddeeb","modified":1490067263257},{"_id":"themes/next/layout/_macro/reward.swig","hash":"b6cb171f0ed227b82b8f7601814af2df93f3a09a","modified":1490067263257},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"4c5dd2c9001a3154625a2d76013952a715c8a45f","modified":1490067263258},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"c5cc0070ca7c9a8dbd4b09e0398db536c3cdbe8a","modified":1490067263258},{"_id":"themes/next/layout/_partials/comments.swig","hash":"cd74d7d0aa2097de0e73e8e53cca5d022cec8c43","modified":1490067263259},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1490067263259},{"_id":"themes/next/layout/_partials/footer.swig","hash":"683616f4a80796051e2346d80acf838a589450b0","modified":1490067263259},{"_id":"themes/next/layout/_partials/header.swig","hash":"8985089c950d6df0efab9cd549a6b9ee50708ee2","modified":1490067263261},{"_id":"themes/next/layout/_partials/head.swig","hash":"376adb0c482242ef8bcad31b93b99cc5c35e92fa","modified":1490067263260},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1490067263275},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"dfbb6e9692333166aa78231ad12b2a40c153cbcb","modified":1490067263262},{"_id":"themes/next/layout/_partials/search.swig","hash":"952b7b8d9ce2c81d4002a9dc2331f1e710f99616","modified":1490067263276},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1490067263281},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1490067263281},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1490067263281},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"e9beddda9758d8739c41fc8c67b2e72fc29c1244","modified":1490067263303},{"_id":"themes/next/scripts/tags/button.js","hash":"aaf71be6b483fca7a65cd6296c2cf1c2271c26a6","modified":1490067263307},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1490067263307},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1490067263307},{"_id":"themes/next/scripts/tags/note.js","hash":"7dc14db08f2c74f8f1952534b424f220f5c000c6","modified":1490067263308},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1490067263308},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1490067263349},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1490067263350},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1490067263350},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1490067263351},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1490067263351},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1490067263352},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1490067263352},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1490067263353},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1490067263353},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1490067263354},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1490067263354},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1490067263354},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1490067263354},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1490067263355},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1490067263355},{"_id":"themes/next/source/uploads/avatar.jpg","hash":"e32765ae1b0526e306cb733533ae7ae897b873f3","modified":1490067263427},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490067263293},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490067263293},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490067263336},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490067263336},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490067263338},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490067263347},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490067263348},{"_id":"themes/next/layout/_components/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1490067263254},{"_id":"themes/next/layout/_components/algolia-search/dom.swig","hash":"bb2c3a926bb7f8fea54d424882b25d93dfde7ae6","modified":1490067263255},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1490067263260},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1490067263261},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1490067263277},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"efa7efcbb575381b508f9aa0e0c53140eef72a7b","modified":1490067263277},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1490067263278},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1490067263278},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1490067263279},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1490067263279},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1490067263280},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1490067263282},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1490067263294},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"8b34af99cb673853fd948c02d07eb11eb3fb41b4","modified":1490067263294},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"03d259066399c1eb4a436ea4e5e7a4802426d72c","modified":1490067263298},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"e495aed8fb36bf8015ddbd64366270a7debad2b0","modified":1490067263301},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"f592adff22628b271ec9657b080cf6b9cc200615","modified":1490067263301},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1490067263302},{"_id":"themes/next/layout/_scripts/third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1490067263302},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1490067263302},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1490067263336},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1490067263337},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"531934ea21ef4dc9f0978512050f54834f0a6cff","modified":1490067263337},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1490067263347},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"c666e352c3b8e4ad0a16cc757b08f44ef9172182","modified":1490067263348},{"_id":"themes/next/source/css/_variables/base.styl","hash":"8b08a5ce4222aa731b180a12127bd0e52d12ede8","modified":1490067263348},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1490067263356},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"84bdc8a4fe127849a5c99bdefe1d0b65ee1a4a0a","modified":1490067263356},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"4a0da1bed19e65bd7db42421b447061bc1618710","modified":1490067263357},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1490067263357},{"_id":"themes/next/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1490067263358},{"_id":"themes/next/source/js/src/post-details.js","hash":"458af3b1bd7783c1950808e66cedfa9fb68bf21f","modified":1490067263358},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1490067263361},{"_id":"themes/next/source/js/src/utils.js","hash":"e34f83848883732ddd7a34a3e3ed2a293f0f76a7","modified":1490067263361},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1490067263363},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1490067263366},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1490067263375},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1490067263376},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1490067263376},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1490067263377},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"8868275e8b6340c87a81c69a54ed138d11fb3c3e","modified":1490067263379},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1490067263379},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1490067263379},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1490067263380},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1490067263380},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1490067263406},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1490067263408},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1490067263408},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1490067263409},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1490067263409},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1490067263410},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1490067263410},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1490067263422},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1490067263422},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1490067263425},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1490067263426},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1490067263426},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1490067263407},{"_id":"themes/next/layout/_scripts/third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1490067263295},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1490067263295},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"24105e62d7f26946907fa14cd02589f899bf8122","modified":1490067263296},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"a79e7e0d809fcf407593dd7ed9e023db21c3cbd6","modified":1490067263296},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1490067263296},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1490067263297},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-mta.swig","hash":"e9a0590dafde1046356620dd2b81e83b6b3b0936","modified":1490067263297},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1490067263297},{"_id":"themes/next/layout/_scripts/third-party/analytics/vkontakte-api.swig","hash":"57cf358737157a8a852c51b849bf122889a86123","modified":1490067263298},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"e4a13e8cd19762ef3aea0e59dfae8b3c1f251f11","modified":1490067263299},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1490067263299},{"_id":"themes/next/layout/_scripts/third-party/comments/gentie.swig","hash":"0f38f053841ef77cdce56a84cfbb4dd4c3329486","modified":1490067263299},{"_id":"themes/next/layout/_scripts/third-party/comments/livere.swig","hash":"5830a52c2a555d3a1f19b67d7bf3d072376cdea9","modified":1490067263300},{"_id":"themes/next/layout/_scripts/third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1490067263300},{"_id":"themes/next/layout/_scripts/third-party/comments/youyan.swig","hash":"de95ec8920d1660680078451008f8bd69f14d082","modified":1490067263300},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ad69cbf94eedacc27e756cdb9c7073416db697d0","modified":1490067263310},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1490067263311},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1490067263311},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"b7d5cc29586ac796a50d90974ad99d24a5982137","modified":1490067263312},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1490067263318},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1490067263327},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1490067263333},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5a35aa0381b0e1d465b952a997194441020446ea","modified":1490067263334},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"b6ee5fefa6046086a76ddbcfafc82482816fa3e0","modified":1490067263334},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1490067263334},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1490067263335},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1490067263335},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1490067263339},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1490067263339},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1490067263340},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1490067263339},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"ce272226a1570f5f7c70243b751a5b0fe1671a88","modified":1490067263340},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1490067263340},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1490067263341},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1490067263342},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1490067263343},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"f23ac53ab901c48859dd29eee6e386b60ff956ba","modified":1490067263343},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1490067263343},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1490067263344},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"34acb45007229b299951ce35d8eef642ea16fbe9","modified":1490067263345},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"221d3dbc04ff6c211ba9382397c4977e9f493153","modified":1490067263345},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"173f3aa31c41782591b7abeadd4f88f68d59b042","modified":1490067263346},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1490067263346},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"1be4ef3f97f329e2531bfd2dfdc40c0e46df35c8","modified":1490067263346},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1490067263347},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"c2390263a298a2b78c5f941e6827c13f02e1ee85","modified":1490067263360},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1490067263367},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1490067263368},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1490067263369},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1490067263369},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1490067263369},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1490067263370},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1490067263373},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1490067263374},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1490067263375},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1490067263377},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1490067263378},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"a02674d823c7b577d38c3cdb91953993b6e4b3a0","modified":1490067263381},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1490067263381},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"3c1d63dd1176c77f9f4cdb1616fbb08c31b9822f","modified":1490067263382},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1490067263421},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1490067263421},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1490067263383},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1490067263384},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1490067263388},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1490067263388},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1490067263424},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1490067263312},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1490067263313},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1490067263313},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"852fd77500bda2c1a6651a14aa48d7d6222adc9d","modified":1490067263314},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1490067263314},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1490067263314},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1490067263315},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"cd2def16d31feb234be27dcdce2a919f70cc6919","modified":1490067263315},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1490067263316},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1490067263316},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1490067263317},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1490067263317},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1490067263317},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1490067263318},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"4783f85872bc7e218c1522a5c1c68cd27a5922db","modified":1490067263319},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a45f5fce643eec4e1b927165229d560364bcace1","modified":1490067263319},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1490067263320},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"4866fb9453d7d4c83a1c4e55d74e4afed336eb8b","modified":1490067263320},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1490067263320},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"61ec8a8481e8b76f2943235256c6d4f89c751c1c","modified":1490067263321},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1490067263321},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"8355b0e9375b3245508efda0e18acd069c2aa767","modified":1490067263322},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1490067263322},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1490067263322},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1490067263323},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"011d5828b4972b2df0b429794b4466ba5bc1b49e","modified":1490067263323},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1490067263324},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1490067263324},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"821991c0890966a512b43e8b1cf9537e738a09a0","modified":1490067263324},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1490067263325},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1490067263325},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"394888efec32749b353292a59ec7f1b609d6325e","modified":1490067263326},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"06b9a99d63b4d57fdbf70b88ab7036fbc47e3f52","modified":1490067263326},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"702be9e57dd6ff5fa99642a1f6e3df26215b8805","modified":1490067263327},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1490067263327},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1490067263328},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"3159b55f35c40bd08e55b00148c523760a708c51","modified":1490067263328},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1490067263329},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"8420b4be386469337243336aee694297875bd439","modified":1490067263329},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"c8a05ce90784db9744c22fab22019eb637df1f2f","modified":1490067263329},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"3b1aabbab57b0b1fafa311feb1212f59e78e7928","modified":1490067263330},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1490067263330},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"7f7e9df15148608a9c29326dd880d8e8e8efc0ec","modified":1490067263331},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1490067263331},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"cd526e814f9323a79fe835085d64867d34b3715d","modified":1490067263331},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1490067263332},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"eb4ede7d7446d8a2f2ddeef3b17f497a6ad30756","modified":1490067263332},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"dc944a01dd59f5ed2d44bb22fdb21fc3f455948f","modified":1490067263333},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1490067263341},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1490067263342},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1490067263344},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1490067263371},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1490067263371},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1490067263372},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1490067263372},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1490067263373},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1490067263372},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1490067263387},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1490067263366},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"964e8dac2cee79c4b49b5bc300675773f6518812","modified":1490067263386}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"c与指针","date":"2017-02-18T02:49:28.000Z","_content":"# 函数\n   c的函数与其它函数相似之处甚多。本章正式描述c的函数。\n## 函数定义\n   类型\n   函数名（形式参数）\n   代码块\n   ``` c\n    void function_name()\n    {\n    \n    }\n   ```\n<!-- more -->\n### 程序7.1:在数组中寻找一个整型值\n    ``` c\n    /*\n    ** 在数组中寻找某个特定值的存储位置，并返回一个指向该位置的指针\n    */\n    int *\n    find_int(int key, int array[], int array_len) {\n        for (int i = 0; i < array_len; ++i) {\n            if (array[i] == key) {\n                return &array[i];\n            }\n        }\n        return NULL;\n    }\n    ```\n## 函数声明\n   当编译器遇到一个函数调用时，它产生代码传递参数并调用这个函数，而且接收函数返回值（如果这个函数有返回值的话）。但是编译器如何知道这个函数接受的是什么类型的和多少数量的参数呢？如何知道函数的返回值类型呢？   \n### 原型\n   1. 如果同一源文件的前面已经出现了该函数的定义，编译器就会记住它的参数数量和类型。\n   2. 使用函数原型。原型总结了函数定义的起始部分的声明，向编译器提供了如何调用该元素的完整信息。使用原型最方便的方法是把原型置于一个单独的文件，当其他源文件需要\n这个函数原型时，就是用`#include`指令包含该文件。\n   ``` c\n    /**\n     * 函数原型:注意最后面的那个分号，它区分了函数原型和函数定义的起始部分。原型告诉编译器函数的参数数量和每个参数的类型以及函数的返回类型。\n     */\n    int *\n    find_int(int key, int array[], int array_len);\n   ```\n   \n#### 总结：从几个方面看，第2种方法比第1种方法更好。\n   1. 现在函数原型具有文件作用域。原型的一份拷贝可以作用于整个源文件，较之在函数每次调用前单独写一份原型要容易的多。\n   2. 现在函数原型只书写一次，这样就不会出现函数的多份原型的拷贝之间不一致的现象。\n   3. 如果对函数的定义进行了修改，我们只需要修改原型，并重新编译所有包含了该原型的源文件即可。\n   4. 如果函数的原型同时被`#include`指令包含到定义的源文件中，编译器就可以确认函数原型与函数定义是否一致。\n   \n#### 思考：含糊声明存在危害。\n   1. 考虑下面声明，它看上去有点含糊：\n   `int * func();`\n   2. 它即可以看作是一个旧式的声明(只给出func函数的返回类型),也可以看作是新式的没有参数的函数声明。最终，它会被解释成旧式风格的函数声明，目的是保持与ANSI标准之前的程序的兼容性。一个没有参数的函数声明应该写成如下的样子：\n   `int * func(void);`\n   3. 关键字void提示没有任何参数，而不是表示它是一个类型为void的参数。\n   \n### 函数的缺省认定\n   1. 当函数调用一个无法见到原型的函数时，编译器会认为函数返回一个整型值。对于那些不返回整型的函数，这种认定会引起错误。\n   \n## 函数的参数\n   1. c函数所有参数均以\"传值调用\"的方式进行传递。这意味着函数将获得参数值的一份拷贝，这样函数可以放心的修改这个拷贝值。而不必担心修改函数调用程序实际传给它的参数。这种调用与Modula和Pascal中的值参数（不是var参数）相同。\n   2. 但是如果被传递的参数是一个数组名，并且在函数中使用数组的下标引用该数组的参数，那么函数对数组元素进行的修改实际修改的是调用函数程序中的数组元素。函数将访问调用该函数程序的数组元素，数组并不会被复制。这个行为被称为“传址调用”。数组名的值实际上是一个指针，传递给函数的其实是这个指针的一份拷贝。\n   \n### 传参规则\n   1. 传递给函数的标量参数是传值调用的。\n   2. 传递给函数的数组参数，在行为上就像是它们通过传址调用的。\n   \n### 程序示例\n\n#### 奇偶校验\n    ```\n    /**\n     * 程序 7.2 奇偶校验\n     */\n    int\n    even_parity(int value, int n_bits) {\n        int parity = 0;\n        /**\n         * 计数值中为1的位的个数\n         */\n        while (n_bits > 0) {\n            parity += value & 1;\n            value >>= 1;\n            n_bits--;\n        }\n        // 如果计数器的最低位是0,返回TRUE(表示1的位数为偶数个)\n        return (parity % 2) == 0;\n    }\n    ```\n   1. 这个函数在执行过程中会破坏两个参数的值。但这无妨，因为参数是通过值传递调用的。\n   \n#### 整数交换，无效的版本\n    ```\n        /**\n         * 程序 7.3a \n         * 交换程序中的两个整数(没有效果)\n         */\n        void\n        swap(int a, int b) {\n            int temp = a;\n            a = b;\n            b = temp;\n        }\n    ```\n   1. 这个函数希望修改程序所传递的参数。但是这个程序是无效的，因为它们交换的实际上是参数的拷贝。\n   \n#### 整数交换，有效的版本\n   为了访问调用程序的值，你必须向程序传递你所希望修改的变量的指针。接着函数必须对指针进行间接访问操作，修改需要改变的变量。\n   ```\n        /**\n         * 程序 7.3b\n         * 交换程序中的两个整数\n         */\n        void\n        swap(int *a, int *b) {\n            int temp;\n            temp = *a;\n            *a = *b;\n            *b = temp;\n        }\n   ```\n#### 将一个数组设置为0\n    ```c\n        /**\n         * 程序 7.4 把一个数组的所有元素都置为0\n         */\n        void clear_array(int array[], int n_elements) {\n            while (n_elements > 0) {\n                array[--n_elements] = 0;\n            }\n        }\n    ```\n   1. `n_elements` 是一个标量参数，所以它是传值调用的。在函数中修改它的值并不会影响调用程序中对应参数，另一方面，函数确实把调用函数的数组都置为0.\n   2. 数组的值实际上是一个指针，下标引用实际上是对这个指针进行间接访问。\n   3. 在声明数组参数时，不指定它的长度是合法的，因为函数并不为数组分配内存。间接访问操作将访问调用程序中的数组元素。\n   \n### ADT 和 黑盒\n   1. c可以用于设计和实现抽象数据类型，因为它可以限制函数和数据定义的作用域。，这个技巧也被成为黑盒设计。抽象数据类型的想法是hi很简单的--模块具有功能说明和接口说明，前者说明模块所执行的任务，后者定义模块的使用。\n   2. 限制对模块的访问时通过 `static` 的合理使用实现的。\n   \n#### 地址列表模块案例\n    `addresslist.h`\n    ``` c\n        #ifndef CHAPTER07_FUNC_ADDRLIST_H\n        #define CHAPTER07_FUNC_ADDRLIST_H\n        /**\n         * 地址列表模块声明\n         */\n        \n        /**\n         * 数据特征\n         * 各种数据的最大长度，包括结尾的NUL字符和地址的最大数量\n         */\n        \n        #define NAME_LENGTH 30 /*允许出现的最长名字*/\n        #define ADDR_LENGTH 100 /*允许出现地址的最大长度*/\n        #define PHONE_LENGTH 11/*允许出现的最大号码长度*/\n        #define MAX_ADDRESSES 1000/*允许出现的字多地址个数*/\n        \n        /**\n         * 给出一个名字，查找对应的地址\n         */\n        char const *\n        lookup_address(char const *name);\n        \n        /**\n         * 给出一个名字，查找对应号码\n         */\n        char const *\n        lookup_phone(char const *name);\n        \n        #endif //CHAPTER07_FUNC_ADDRLIST_H\n    ```\n    `addresslist.c`\n    ``` c\n        /**\n         * 用于维护一个列表的抽象数据类型\n         */\n        \n        #include \"addrlist.h\"\n        #include <stdio.h>\n        #include <string.h>\n        \n        /**\n         * 每个地址的三个部分，分别保存在数组的对应元素中\n         */\n        static char name[MAX_ADDRESSES][NAME_LENGTH] = {\"1\", \"2\", \"3\"};\n        static char address[MAX_ADDRESSES][ADDR_LENGTH] = {\"4\", \"5\", \"6\"};\n        static char phone[MAX_ADDRESSES][PHONE_LENGTH] = {\"7\", \"8\", \"9\"};\n        \n        /**\n        ** 这个函数在数组中查找一个名字并返回对应下标\n        **/\n        static int find_entry(char const *name_to_find) {\n            int entry;\n            for (int entry = 0; entry < MAX_ADDRESSES; ++entry) {\n                if (strcmp(name_to_find, name[entry]) == 0) {\n                    return entry;\n                }\n                return -1;\n            }\n        }\n        \n        char const *\n        lookup_address(char const *name) {\n            int entry;\n            entry = find_entry(name);\n            if (entry == -1) {\n                return NULL;\n            } else {\n                return address[entry];\n            }\n        }\n        \n        char const *\n        lookup_phone(char const *name) {\n            int entry;\n            entry = find_entry(name);\n            if (entry == -1) {\n                return NULL;\n            } else {\n                return phone[entry];\n            }\n        }\n    ```\n    \n   1. 黑盒的功能是通过规定的接口访问，在这个例子里，接口是 `lookup_address` 和 `lookup_phone`。但是用户不能访问模块实现相关的数据，如数组和辅助函数 `find_entry`,因为这些内容被声明为 `static` 。\n\n   \n   \n   \n   ","source":"_posts/2017-02-18-读书笔记-c与指针.md","raw":"---\ntitle: c与指针\ndate: 2017-02-18 10:49:28\ntags: 读书笔记\n---\n# 函数\n   c的函数与其它函数相似之处甚多。本章正式描述c的函数。\n## 函数定义\n   类型\n   函数名（形式参数）\n   代码块\n   ``` c\n    void function_name()\n    {\n    \n    }\n   ```\n<!-- more -->\n### 程序7.1:在数组中寻找一个整型值\n    ``` c\n    /*\n    ** 在数组中寻找某个特定值的存储位置，并返回一个指向该位置的指针\n    */\n    int *\n    find_int(int key, int array[], int array_len) {\n        for (int i = 0; i < array_len; ++i) {\n            if (array[i] == key) {\n                return &array[i];\n            }\n        }\n        return NULL;\n    }\n    ```\n## 函数声明\n   当编译器遇到一个函数调用时，它产生代码传递参数并调用这个函数，而且接收函数返回值（如果这个函数有返回值的话）。但是编译器如何知道这个函数接受的是什么类型的和多少数量的参数呢？如何知道函数的返回值类型呢？   \n### 原型\n   1. 如果同一源文件的前面已经出现了该函数的定义，编译器就会记住它的参数数量和类型。\n   2. 使用函数原型。原型总结了函数定义的起始部分的声明，向编译器提供了如何调用该元素的完整信息。使用原型最方便的方法是把原型置于一个单独的文件，当其他源文件需要\n这个函数原型时，就是用`#include`指令包含该文件。\n   ``` c\n    /**\n     * 函数原型:注意最后面的那个分号，它区分了函数原型和函数定义的起始部分。原型告诉编译器函数的参数数量和每个参数的类型以及函数的返回类型。\n     */\n    int *\n    find_int(int key, int array[], int array_len);\n   ```\n   \n#### 总结：从几个方面看，第2种方法比第1种方法更好。\n   1. 现在函数原型具有文件作用域。原型的一份拷贝可以作用于整个源文件，较之在函数每次调用前单独写一份原型要容易的多。\n   2. 现在函数原型只书写一次，这样就不会出现函数的多份原型的拷贝之间不一致的现象。\n   3. 如果对函数的定义进行了修改，我们只需要修改原型，并重新编译所有包含了该原型的源文件即可。\n   4. 如果函数的原型同时被`#include`指令包含到定义的源文件中，编译器就可以确认函数原型与函数定义是否一致。\n   \n#### 思考：含糊声明存在危害。\n   1. 考虑下面声明，它看上去有点含糊：\n   `int * func();`\n   2. 它即可以看作是一个旧式的声明(只给出func函数的返回类型),也可以看作是新式的没有参数的函数声明。最终，它会被解释成旧式风格的函数声明，目的是保持与ANSI标准之前的程序的兼容性。一个没有参数的函数声明应该写成如下的样子：\n   `int * func(void);`\n   3. 关键字void提示没有任何参数，而不是表示它是一个类型为void的参数。\n   \n### 函数的缺省认定\n   1. 当函数调用一个无法见到原型的函数时，编译器会认为函数返回一个整型值。对于那些不返回整型的函数，这种认定会引起错误。\n   \n## 函数的参数\n   1. c函数所有参数均以\"传值调用\"的方式进行传递。这意味着函数将获得参数值的一份拷贝，这样函数可以放心的修改这个拷贝值。而不必担心修改函数调用程序实际传给它的参数。这种调用与Modula和Pascal中的值参数（不是var参数）相同。\n   2. 但是如果被传递的参数是一个数组名，并且在函数中使用数组的下标引用该数组的参数，那么函数对数组元素进行的修改实际修改的是调用函数程序中的数组元素。函数将访问调用该函数程序的数组元素，数组并不会被复制。这个行为被称为“传址调用”。数组名的值实际上是一个指针，传递给函数的其实是这个指针的一份拷贝。\n   \n### 传参规则\n   1. 传递给函数的标量参数是传值调用的。\n   2. 传递给函数的数组参数，在行为上就像是它们通过传址调用的。\n   \n### 程序示例\n\n#### 奇偶校验\n    ```\n    /**\n     * 程序 7.2 奇偶校验\n     */\n    int\n    even_parity(int value, int n_bits) {\n        int parity = 0;\n        /**\n         * 计数值中为1的位的个数\n         */\n        while (n_bits > 0) {\n            parity += value & 1;\n            value >>= 1;\n            n_bits--;\n        }\n        // 如果计数器的最低位是0,返回TRUE(表示1的位数为偶数个)\n        return (parity % 2) == 0;\n    }\n    ```\n   1. 这个函数在执行过程中会破坏两个参数的值。但这无妨，因为参数是通过值传递调用的。\n   \n#### 整数交换，无效的版本\n    ```\n        /**\n         * 程序 7.3a \n         * 交换程序中的两个整数(没有效果)\n         */\n        void\n        swap(int a, int b) {\n            int temp = a;\n            a = b;\n            b = temp;\n        }\n    ```\n   1. 这个函数希望修改程序所传递的参数。但是这个程序是无效的，因为它们交换的实际上是参数的拷贝。\n   \n#### 整数交换，有效的版本\n   为了访问调用程序的值，你必须向程序传递你所希望修改的变量的指针。接着函数必须对指针进行间接访问操作，修改需要改变的变量。\n   ```\n        /**\n         * 程序 7.3b\n         * 交换程序中的两个整数\n         */\n        void\n        swap(int *a, int *b) {\n            int temp;\n            temp = *a;\n            *a = *b;\n            *b = temp;\n        }\n   ```\n#### 将一个数组设置为0\n    ```c\n        /**\n         * 程序 7.4 把一个数组的所有元素都置为0\n         */\n        void clear_array(int array[], int n_elements) {\n            while (n_elements > 0) {\n                array[--n_elements] = 0;\n            }\n        }\n    ```\n   1. `n_elements` 是一个标量参数，所以它是传值调用的。在函数中修改它的值并不会影响调用程序中对应参数，另一方面，函数确实把调用函数的数组都置为0.\n   2. 数组的值实际上是一个指针，下标引用实际上是对这个指针进行间接访问。\n   3. 在声明数组参数时，不指定它的长度是合法的，因为函数并不为数组分配内存。间接访问操作将访问调用程序中的数组元素。\n   \n### ADT 和 黑盒\n   1. c可以用于设计和实现抽象数据类型，因为它可以限制函数和数据定义的作用域。，这个技巧也被成为黑盒设计。抽象数据类型的想法是hi很简单的--模块具有功能说明和接口说明，前者说明模块所执行的任务，后者定义模块的使用。\n   2. 限制对模块的访问时通过 `static` 的合理使用实现的。\n   \n#### 地址列表模块案例\n    `addresslist.h`\n    ``` c\n        #ifndef CHAPTER07_FUNC_ADDRLIST_H\n        #define CHAPTER07_FUNC_ADDRLIST_H\n        /**\n         * 地址列表模块声明\n         */\n        \n        /**\n         * 数据特征\n         * 各种数据的最大长度，包括结尾的NUL字符和地址的最大数量\n         */\n        \n        #define NAME_LENGTH 30 /*允许出现的最长名字*/\n        #define ADDR_LENGTH 100 /*允许出现地址的最大长度*/\n        #define PHONE_LENGTH 11/*允许出现的最大号码长度*/\n        #define MAX_ADDRESSES 1000/*允许出现的字多地址个数*/\n        \n        /**\n         * 给出一个名字，查找对应的地址\n         */\n        char const *\n        lookup_address(char const *name);\n        \n        /**\n         * 给出一个名字，查找对应号码\n         */\n        char const *\n        lookup_phone(char const *name);\n        \n        #endif //CHAPTER07_FUNC_ADDRLIST_H\n    ```\n    `addresslist.c`\n    ``` c\n        /**\n         * 用于维护一个列表的抽象数据类型\n         */\n        \n        #include \"addrlist.h\"\n        #include <stdio.h>\n        #include <string.h>\n        \n        /**\n         * 每个地址的三个部分，分别保存在数组的对应元素中\n         */\n        static char name[MAX_ADDRESSES][NAME_LENGTH] = {\"1\", \"2\", \"3\"};\n        static char address[MAX_ADDRESSES][ADDR_LENGTH] = {\"4\", \"5\", \"6\"};\n        static char phone[MAX_ADDRESSES][PHONE_LENGTH] = {\"7\", \"8\", \"9\"};\n        \n        /**\n        ** 这个函数在数组中查找一个名字并返回对应下标\n        **/\n        static int find_entry(char const *name_to_find) {\n            int entry;\n            for (int entry = 0; entry < MAX_ADDRESSES; ++entry) {\n                if (strcmp(name_to_find, name[entry]) == 0) {\n                    return entry;\n                }\n                return -1;\n            }\n        }\n        \n        char const *\n        lookup_address(char const *name) {\n            int entry;\n            entry = find_entry(name);\n            if (entry == -1) {\n                return NULL;\n            } else {\n                return address[entry];\n            }\n        }\n        \n        char const *\n        lookup_phone(char const *name) {\n            int entry;\n            entry = find_entry(name);\n            if (entry == -1) {\n                return NULL;\n            } else {\n                return phone[entry];\n            }\n        }\n    ```\n    \n   1. 黑盒的功能是通过规定的接口访问，在这个例子里，接口是 `lookup_address` 和 `lookup_phone`。但是用户不能访问模块实现相关的数据，如数组和辅助函数 `find_entry`,因为这些内容被声明为 `static` 。\n\n   \n   \n   \n   ","slug":"读书笔记-c与指针","published":1,"updated":"2017-03-21T04:51:09.947Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0j2it040000p8utan44n1xy","content":"<h1 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h1><p>   c的函数与其它函数相似之处甚多。本章正式描述c的函数。</p>\n<h2 id=\"函数定义\"><a href=\"#函数定义\" class=\"headerlink\" title=\"函数定义\"></a>函数定义</h2><p>   类型<br>   函数名（形式参数）<br>   代码块<br>   <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">function_name</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<h3 id=\"程序7-1-在数组中寻找一个整型值\"><a href=\"#程序7-1-在数组中寻找一个整型值\" class=\"headerlink\" title=\"程序7.1:在数组中寻找一个整型值\"></a>程序7.1:在数组中寻找一个整型值</h3><pre><code><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">** 在数组中寻找某个特定值的存储位置，并返回一个指向该位置的指针</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> *</span></div><div class=\"line\"><span class=\"title\">find_int</span><span class=\"params\">(<span class=\"keyword\">int</span> key, <span class=\"keyword\">int</span> <span class=\"built_in\">array</span>[], <span class=\"keyword\">int</span> array_len)</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; array_len; ++i) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">array</span>[i] == key) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> &amp;<span class=\"built_in\">array</span>[i];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</code></pre><h2 id=\"函数声明\"><a href=\"#函数声明\" class=\"headerlink\" title=\"函数声明\"></a>函数声明</h2><p>   当编译器遇到一个函数调用时，它产生代码传递参数并调用这个函数，而且接收函数返回值（如果这个函数有返回值的话）。但是编译器如何知道这个函数接受的是什么类型的和多少数量的参数呢？如何知道函数的返回值类型呢？   </p>\n<h3 id=\"原型\"><a href=\"#原型\" class=\"headerlink\" title=\"原型\"></a>原型</h3><ol>\n<li>如果同一源文件的前面已经出现了该函数的定义，编译器就会记住它的参数数量和类型。</li>\n<li>使用函数原型。原型总结了函数定义的起始部分的声明，向编译器提供了如何调用该元素的完整信息。使用原型最方便的方法是把原型置于一个单独的文件，当其他源文件需要<br>这个函数原型时，就是用<code>#include</code>指令包含该文件。<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 函数原型:注意最后面的那个分号，它区分了函数原型和函数定义的起始部分。原型告诉编译器函数的参数数量和每个参数的类型以及函数的返回类型。</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> *</span></div><div class=\"line\"><span class=\"title\">find_int</span><span class=\"params\">(<span class=\"keyword\">int</span> key, <span class=\"keyword\">int</span> <span class=\"built_in\">array</span>[], <span class=\"keyword\">int</span> array_len)</span>;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"总结：从几个方面看，第2种方法比第1种方法更好。\"><a href=\"#总结：从几个方面看，第2种方法比第1种方法更好。\" class=\"headerlink\" title=\"总结：从几个方面看，第2种方法比第1种方法更好。\"></a>总结：从几个方面看，第2种方法比第1种方法更好。</h4><ol>\n<li>现在函数原型具有文件作用域。原型的一份拷贝可以作用于整个源文件，较之在函数每次调用前单独写一份原型要容易的多。</li>\n<li>现在函数原型只书写一次，这样就不会出现函数的多份原型的拷贝之间不一致的现象。</li>\n<li>如果对函数的定义进行了修改，我们只需要修改原型，并重新编译所有包含了该原型的源文件即可。</li>\n<li>如果函数的原型同时被<code>#include</code>指令包含到定义的源文件中，编译器就可以确认函数原型与函数定义是否一致。</li>\n</ol>\n<h4 id=\"思考：含糊声明存在危害。\"><a href=\"#思考：含糊声明存在危害。\" class=\"headerlink\" title=\"思考：含糊声明存在危害。\"></a>思考：含糊声明存在危害。</h4><ol>\n<li>考虑下面声明，它看上去有点含糊：<br><code>int * func();</code></li>\n<li>它即可以看作是一个旧式的声明(只给出func函数的返回类型),也可以看作是新式的没有参数的函数声明。最终，它会被解释成旧式风格的函数声明，目的是保持与ANSI标准之前的程序的兼容性。一个没有参数的函数声明应该写成如下的样子：<br><code>int * func(void);</code></li>\n<li>关键字void提示没有任何参数，而不是表示它是一个类型为void的参数。</li>\n</ol>\n<h3 id=\"函数的缺省认定\"><a href=\"#函数的缺省认定\" class=\"headerlink\" title=\"函数的缺省认定\"></a>函数的缺省认定</h3><ol>\n<li>当函数调用一个无法见到原型的函数时，编译器会认为函数返回一个整型值。对于那些不返回整型的函数，这种认定会引起错误。</li>\n</ol>\n<h2 id=\"函数的参数\"><a href=\"#函数的参数\" class=\"headerlink\" title=\"函数的参数\"></a>函数的参数</h2><ol>\n<li>c函数所有参数均以”传值调用”的方式进行传递。这意味着函数将获得参数值的一份拷贝，这样函数可以放心的修改这个拷贝值。而不必担心修改函数调用程序实际传给它的参数。这种调用与Modula和Pascal中的值参数（不是var参数）相同。</li>\n<li>但是如果被传递的参数是一个数组名，并且在函数中使用数组的下标引用该数组的参数，那么函数对数组元素进行的修改实际修改的是调用函数程序中的数组元素。函数将访问调用该函数程序的数组元素，数组并不会被复制。这个行为被称为“传址调用”。数组名的值实际上是一个指针，传递给函数的其实是这个指针的一份拷贝。</li>\n</ol>\n<h3 id=\"传参规则\"><a href=\"#传参规则\" class=\"headerlink\" title=\"传参规则\"></a>传参规则</h3><ol>\n<li>传递给函数的标量参数是传值调用的。</li>\n<li>传递给函数的数组参数，在行为上就像是它们通过传址调用的。</li>\n</ol>\n<h3 id=\"程序示例\"><a href=\"#程序示例\" class=\"headerlink\" title=\"程序示例\"></a>程序示例</h3><h4 id=\"奇偶校验\"><a href=\"#奇偶校验\" class=\"headerlink\" title=\"奇偶校验\"></a>奇偶校验</h4><pre><code><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 程序 7.2 奇偶校验</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span></span></div><div class=\"line\"><span class=\"title\">even_parity</span>(<span class=\"params\"><span class=\"keyword\">int</span> <span class=\"keyword\">value</span>, <span class=\"keyword\">int</span> n_bits</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> parity = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 计数值中为1的位的个数</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">while</span> (n_bits &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        parity += <span class=\"keyword\">value</span> &amp; <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">value</span> &gt;&gt;= <span class=\"number\">1</span>;</div><div class=\"line\">        n_bits--;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 如果计数器的最低位是0,返回TRUE(表示1的位数为偶数个)</span></div><div class=\"line\">    <span class=\"keyword\">return</span> (parity % <span class=\"number\">2</span>) == <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</code></pre><ol>\n<li>这个函数在执行过程中会破坏两个参数的值。但这无妨，因为参数是通过值传递调用的。</li>\n</ol>\n<h4 id=\"整数交换，无效的版本\"><a href=\"#整数交换，无效的版本\" class=\"headerlink\" title=\"整数交换，无效的版本\"></a>整数交换，无效的版本</h4><pre><code><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 程序 7.3a </div><div class=\"line\"> * 交换程序中的两个整数(没有效果)</div><div class=\"line\"> */</div><div class=\"line\">void</div><div class=\"line\"><span class=\"keyword\">swap(int </span>a, int <span class=\"keyword\">b) </span>&#123;</div><div class=\"line\">    int temp = a<span class=\"comment\">;</span></div><div class=\"line\">    a = <span class=\"keyword\">b;</span></div><div class=\"line\">    <span class=\"keyword\">b </span>= temp<span class=\"comment\">;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</code></pre><ol>\n<li>这个函数希望修改程序所传递的参数。但是这个程序是无效的，因为它们交换的实际上是参数的拷贝。</li>\n</ol>\n<h4 id=\"整数交换，有效的版本\"><a href=\"#整数交换，有效的版本\" class=\"headerlink\" title=\"整数交换，有效的版本\"></a>整数交换，有效的版本</h4><p>   为了访问调用程序的值，你必须向程序传递你所希望修改的变量的指针。接着函数必须对指针进行间接访问操作，修改需要改变的变量。<br>   <figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 程序 7.3b</div><div class=\"line\"> * 交换程序中的两个整数</div><div class=\"line\"> */</div><div class=\"line\">void</div><div class=\"line\"><span class=\"keyword\">swap(int </span>*a, int *<span class=\"keyword\">b) </span>&#123;</div><div class=\"line\">    int temp<span class=\"comment\">;</span></div><div class=\"line\">    temp = *a<span class=\"comment\">;</span></div><div class=\"line\">    *a = *<span class=\"keyword\">b;</span></div><div class=\"line\">    *<span class=\"keyword\">b </span>= temp<span class=\"comment\">;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"将一个数组设置为0\"><a href=\"#将一个数组设置为0\" class=\"headerlink\" title=\"将一个数组设置为0\"></a>将一个数组设置为0</h4><pre><code><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 程序 7.4 把一个数组的所有元素都置为0</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">clear_array</span><span class=\"params\">(<span class=\"keyword\">int</span> <span class=\"built_in\">array</span>[], <span class=\"keyword\">int</span> n_elements)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">while</span> (n_elements &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"built_in\">array</span>[--n_elements] = <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</code></pre><ol>\n<li><code>n_elements</code> 是一个标量参数，所以它是传值调用的。在函数中修改它的值并不会影响调用程序中对应参数，另一方面，函数确实把调用函数的数组都置为0.</li>\n<li>数组的值实际上是一个指针，下标引用实际上是对这个指针进行间接访问。</li>\n<li>在声明数组参数时，不指定它的长度是合法的，因为函数并不为数组分配内存。间接访问操作将访问调用程序中的数组元素。</li>\n</ol>\n<h3 id=\"ADT-和-黑盒\"><a href=\"#ADT-和-黑盒\" class=\"headerlink\" title=\"ADT 和 黑盒\"></a>ADT 和 黑盒</h3><ol>\n<li>c可以用于设计和实现抽象数据类型，因为它可以限制函数和数据定义的作用域。，这个技巧也被成为黑盒设计。抽象数据类型的想法是hi很简单的–模块具有功能说明和接口说明，前者说明模块所执行的任务，后者定义模块的使用。</li>\n<li>限制对模块的访问时通过 <code>static</code> 的合理使用实现的。</li>\n</ol>\n<h4 id=\"地址列表模块案例\"><a href=\"#地址列表模块案例\" class=\"headerlink\" title=\"地址列表模块案例\"></a>地址列表模块案例</h4><pre><code>`addresslist.h`\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> CHAPTER07_FUNC_ADDRLIST_H</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> CHAPTER07_FUNC_ADDRLIST_H</span></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 地址列表模块声明</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 数据特征</div><div class=\"line\"> * 各种数据的最大长度，包括结尾的NUL字符和地址的最大数量</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> NAME_LENGTH 30 <span class=\"comment\">/*允许出现的最长名字*/</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ADDR_LENGTH 100 <span class=\"comment\">/*允许出现地址的最大长度*/</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PHONE_LENGTH 11<span class=\"comment\">/*允许出现的最大号码长度*/</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAX_ADDRESSES 1000<span class=\"comment\">/*允许出现的字多地址个数*/</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 给出一个名字，查找对应的地址</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span> <span class=\"keyword\">const</span> *</span></div><div class=\"line\"><span class=\"title\">lookup_address</span><span class=\"params\">(<span class=\"keyword\">char</span> <span class=\"keyword\">const</span> *name)</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 给出一个名字，查找对应号码</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span> <span class=\"keyword\">const</span> *</span></div><div class=\"line\"><span class=\"title\">lookup_phone</span><span class=\"params\">(<span class=\"keyword\">char</span> <span class=\"keyword\">const</span> *name)</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">//CHAPTER07_FUNC_ADDRLIST_H</span></span></div></pre></td></tr></table></figure>\n\n`addresslist.c`\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 用于维护一个列表的抽象数据类型</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"addrlist.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 每个地址的三个部分，分别保存在数组的对应元素中</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">char</span> name[MAX_ADDRESSES][NAME_LENGTH] = &#123;<span class=\"string\">\"1\"</span>, <span class=\"string\">\"2\"</span>, <span class=\"string\">\"3\"</span>&#125;;</div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">char</span> address[MAX_ADDRESSES][ADDR_LENGTH] = &#123;<span class=\"string\">\"4\"</span>, <span class=\"string\">\"5\"</span>, <span class=\"string\">\"6\"</span>&#125;;</div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">char</span> phone[MAX_ADDRESSES][PHONE_LENGTH] = &#123;<span class=\"string\">\"7\"</span>, <span class=\"string\">\"8\"</span>, <span class=\"string\">\"9\"</span>&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">** 这个函数在数组中查找一个名字并返回对应下标</div><div class=\"line\">**/</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">find_entry</span><span class=\"params\">(<span class=\"keyword\">char</span> <span class=\"keyword\">const</span> *name_to_find)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> entry;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> entry = <span class=\"number\">0</span>; entry &lt; MAX_ADDRESSES; ++entry) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(name_to_find, name[entry]) == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> entry;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span> <span class=\"keyword\">const</span> *</span></div><div class=\"line\"><span class=\"title\">lookup_address</span><span class=\"params\">(<span class=\"keyword\">char</span> <span class=\"keyword\">const</span> *name)</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> entry;</div><div class=\"line\">    entry = find_entry(name);</div><div class=\"line\">    <span class=\"keyword\">if</span> (entry == <span class=\"number\">-1</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> address[entry];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span> <span class=\"keyword\">const</span> *</span></div><div class=\"line\"><span class=\"title\">lookup_phone</span><span class=\"params\">(<span class=\"keyword\">char</span> <span class=\"keyword\">const</span> *name)</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> entry;</div><div class=\"line\">    entry = find_entry(name);</div><div class=\"line\">    <span class=\"keyword\">if</span> (entry == <span class=\"number\">-1</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> phone[entry];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</code></pre><ol>\n<li>黑盒的功能是通过规定的接口访问，在这个例子里，接口是 <code>lookup_address</code> 和 <code>lookup_phone</code>。但是用户不能访问模块实现相关的数据，如数组和辅助函数 <code>find_entry</code>,因为这些内容被声明为 <code>static</code> 。</li>\n</ol>\n","excerpt":"<h1 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h1><p>   c的函数与其它函数相似之处甚多。本章正式描述c的函数。</p>\n<h2 id=\"函数定义\"><a href=\"#函数定义\" class=\"headerlink\" title=\"函数定义\"></a>函数定义</h2><p>   类型<br>   函数名（形式参数）<br>   代码块<br>   <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">function_name</span><span class=\"params\">()</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>","more":"<h3 id=\"程序7-1-在数组中寻找一个整型值\"><a href=\"#程序7-1-在数组中寻找一个整型值\" class=\"headerlink\" title=\"程序7.1:在数组中寻找一个整型值\"></a>程序7.1:在数组中寻找一个整型值</h3><pre><code><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</div><div class=\"line\">** 在数组中寻找某个特定值的存储位置，并返回一个指向该位置的指针</div><div class=\"line\">*/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> *</div><div class=\"line\"><span class=\"title\">find_int</span><span class=\"params\">(<span class=\"keyword\">int</span> key, <span class=\"keyword\">int</span> <span class=\"built_in\">array</span>[], <span class=\"keyword\">int</span> array_len)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; array_len; ++i) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">array</span>[i] == key) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> &amp;<span class=\"built_in\">array</span>[i];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</code></pre><h2 id=\"函数声明\"><a href=\"#函数声明\" class=\"headerlink\" title=\"函数声明\"></a>函数声明</h2><p>   当编译器遇到一个函数调用时，它产生代码传递参数并调用这个函数，而且接收函数返回值（如果这个函数有返回值的话）。但是编译器如何知道这个函数接受的是什么类型的和多少数量的参数呢？如何知道函数的返回值类型呢？   </p>\n<h3 id=\"原型\"><a href=\"#原型\" class=\"headerlink\" title=\"原型\"></a>原型</h3><ol>\n<li>如果同一源文件的前面已经出现了该函数的定义，编译器就会记住它的参数数量和类型。</li>\n<li>使用函数原型。原型总结了函数定义的起始部分的声明，向编译器提供了如何调用该元素的完整信息。使用原型最方便的方法是把原型置于一个单独的文件，当其他源文件需要<br>这个函数原型时，就是用<code>#include</code>指令包含该文件。<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 函数原型:注意最后面的那个分号，它区分了函数原型和函数定义的起始部分。原型告诉编译器函数的参数数量和每个参数的类型以及函数的返回类型。</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> *</div><div class=\"line\"><span class=\"title\">find_int</span><span class=\"params\">(<span class=\"keyword\">int</span> key, <span class=\"keyword\">int</span> <span class=\"built_in\">array</span>[], <span class=\"keyword\">int</span> array_len)</span></span>;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"总结：从几个方面看，第2种方法比第1种方法更好。\"><a href=\"#总结：从几个方面看，第2种方法比第1种方法更好。\" class=\"headerlink\" title=\"总结：从几个方面看，第2种方法比第1种方法更好。\"></a>总结：从几个方面看，第2种方法比第1种方法更好。</h4><ol>\n<li>现在函数原型具有文件作用域。原型的一份拷贝可以作用于整个源文件，较之在函数每次调用前单独写一份原型要容易的多。</li>\n<li>现在函数原型只书写一次，这样就不会出现函数的多份原型的拷贝之间不一致的现象。</li>\n<li>如果对函数的定义进行了修改，我们只需要修改原型，并重新编译所有包含了该原型的源文件即可。</li>\n<li>如果函数的原型同时被<code>#include</code>指令包含到定义的源文件中，编译器就可以确认函数原型与函数定义是否一致。</li>\n</ol>\n<h4 id=\"思考：含糊声明存在危害。\"><a href=\"#思考：含糊声明存在危害。\" class=\"headerlink\" title=\"思考：含糊声明存在危害。\"></a>思考：含糊声明存在危害。</h4><ol>\n<li>考虑下面声明，它看上去有点含糊：<br><code>int * func();</code></li>\n<li>它即可以看作是一个旧式的声明(只给出func函数的返回类型),也可以看作是新式的没有参数的函数声明。最终，它会被解释成旧式风格的函数声明，目的是保持与ANSI标准之前的程序的兼容性。一个没有参数的函数声明应该写成如下的样子：<br><code>int * func(void);</code></li>\n<li>关键字void提示没有任何参数，而不是表示它是一个类型为void的参数。</li>\n</ol>\n<h3 id=\"函数的缺省认定\"><a href=\"#函数的缺省认定\" class=\"headerlink\" title=\"函数的缺省认定\"></a>函数的缺省认定</h3><ol>\n<li>当函数调用一个无法见到原型的函数时，编译器会认为函数返回一个整型值。对于那些不返回整型的函数，这种认定会引起错误。</li>\n</ol>\n<h2 id=\"函数的参数\"><a href=\"#函数的参数\" class=\"headerlink\" title=\"函数的参数\"></a>函数的参数</h2><ol>\n<li>c函数所有参数均以”传值调用”的方式进行传递。这意味着函数将获得参数值的一份拷贝，这样函数可以放心的修改这个拷贝值。而不必担心修改函数调用程序实际传给它的参数。这种调用与Modula和Pascal中的值参数（不是var参数）相同。</li>\n<li>但是如果被传递的参数是一个数组名，并且在函数中使用数组的下标引用该数组的参数，那么函数对数组元素进行的修改实际修改的是调用函数程序中的数组元素。函数将访问调用该函数程序的数组元素，数组并不会被复制。这个行为被称为“传址调用”。数组名的值实际上是一个指针，传递给函数的其实是这个指针的一份拷贝。</li>\n</ol>\n<h3 id=\"传参规则\"><a href=\"#传参规则\" class=\"headerlink\" title=\"传参规则\"></a>传参规则</h3><ol>\n<li>传递给函数的标量参数是传值调用的。</li>\n<li>传递给函数的数组参数，在行为上就像是它们通过传址调用的。</li>\n</ol>\n<h3 id=\"程序示例\"><a href=\"#程序示例\" class=\"headerlink\" title=\"程序示例\"></a>程序示例</h3><h4 id=\"奇偶校验\"><a href=\"#奇偶校验\" class=\"headerlink\" title=\"奇偶校验\"></a>奇偶校验</h4><pre><code><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 程序 7.2 奇偶校验</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span></div><div class=\"line\"><span class=\"title\">even_parity</span>(<span class=\"params\"><span class=\"keyword\">int</span> <span class=\"keyword\">value</span>, <span class=\"keyword\">int</span> n_bits</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> parity = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 计数值中为1的位的个数</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">while</span> (n_bits &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        parity += <span class=\"keyword\">value</span> &amp; <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">value</span> &gt;&gt;= <span class=\"number\">1</span>;</div><div class=\"line\">        n_bits--;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 如果计数器的最低位是0,返回TRUE(表示1的位数为偶数个)</span></div><div class=\"line\">    <span class=\"keyword\">return</span> (parity % <span class=\"number\">2</span>) == <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</code></pre><ol>\n<li>这个函数在执行过程中会破坏两个参数的值。但这无妨，因为参数是通过值传递调用的。</li>\n</ol>\n<h4 id=\"整数交换，无效的版本\"><a href=\"#整数交换，无效的版本\" class=\"headerlink\" title=\"整数交换，无效的版本\"></a>整数交换，无效的版本</h4><pre><code><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 程序 7.3a </div><div class=\"line\"> * 交换程序中的两个整数(没有效果)</div><div class=\"line\"> */</span></div><div class=\"line\">void</div><div class=\"line\"><span class=\"keyword\">swap(int </span>a, int <span class=\"keyword\">b) </span>&#123;</div><div class=\"line\">    int temp = a<span class=\"comment\">;</span></div><div class=\"line\">    a = <span class=\"keyword\">b;</div><div class=\"line\"></span>    <span class=\"keyword\">b </span>= temp<span class=\"comment\">;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</code></pre><ol>\n<li>这个函数希望修改程序所传递的参数。但是这个程序是无效的，因为它们交换的实际上是参数的拷贝。</li>\n</ol>\n<h4 id=\"整数交换，有效的版本\"><a href=\"#整数交换，有效的版本\" class=\"headerlink\" title=\"整数交换，有效的版本\"></a>整数交换，有效的版本</h4><p>   为了访问调用程序的值，你必须向程序传递你所希望修改的变量的指针。接着函数必须对指针进行间接访问操作，修改需要改变的变量。<br>   <figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 程序 7.3b</div><div class=\"line\"> * 交换程序中的两个整数</div><div class=\"line\"> */</span></div><div class=\"line\">void</div><div class=\"line\"><span class=\"keyword\">swap(int </span>*a, int *<span class=\"keyword\">b) </span>&#123;</div><div class=\"line\">    int temp<span class=\"comment\">;</span></div><div class=\"line\">    temp = *a<span class=\"comment\">;</span></div><div class=\"line\">    *a = *<span class=\"keyword\">b;</div><div class=\"line\"></span>    *<span class=\"keyword\">b </span>= temp<span class=\"comment\">;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"将一个数组设置为0\"><a href=\"#将一个数组设置为0\" class=\"headerlink\" title=\"将一个数组设置为0\"></a>将一个数组设置为0</h4><pre><code><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 程序 7.4 把一个数组的所有元素都置为0</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">clear_array</span><span class=\"params\">(<span class=\"keyword\">int</span> <span class=\"built_in\">array</span>[], <span class=\"keyword\">int</span> n_elements)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">while</span> (n_elements &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"built_in\">array</span>[--n_elements] = <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</code></pre><ol>\n<li><code>n_elements</code> 是一个标量参数，所以它是传值调用的。在函数中修改它的值并不会影响调用程序中对应参数，另一方面，函数确实把调用函数的数组都置为0.</li>\n<li>数组的值实际上是一个指针，下标引用实际上是对这个指针进行间接访问。</li>\n<li>在声明数组参数时，不指定它的长度是合法的，因为函数并不为数组分配内存。间接访问操作将访问调用程序中的数组元素。</li>\n</ol>\n<h3 id=\"ADT-和-黑盒\"><a href=\"#ADT-和-黑盒\" class=\"headerlink\" title=\"ADT 和 黑盒\"></a>ADT 和 黑盒</h3><ol>\n<li>c可以用于设计和实现抽象数据类型，因为它可以限制函数和数据定义的作用域。，这个技巧也被成为黑盒设计。抽象数据类型的想法是hi很简单的–模块具有功能说明和接口说明，前者说明模块所执行的任务，后者定义模块的使用。</li>\n<li>限制对模块的访问时通过 <code>static</code> 的合理使用实现的。</li>\n</ol>\n<h4 id=\"地址列表模块案例\"><a href=\"#地址列表模块案例\" class=\"headerlink\" title=\"地址列表模块案例\"></a>地址列表模块案例</h4><pre><code>`addresslist.h`\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> CHAPTER07_FUNC_ADDRLIST_H</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> CHAPTER07_FUNC_ADDRLIST_H</span></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 地址列表模块声明</div><div class=\"line\"> */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 数据特征</div><div class=\"line\"> * 各种数据的最大长度，包括结尾的NUL字符和地址的最大数量</div><div class=\"line\"> */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> NAME_LENGTH 30 <span class=\"comment\">/*允许出现的最长名字*/</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ADDR_LENGTH 100 <span class=\"comment\">/*允许出现地址的最大长度*/</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PHONE_LENGTH 11<span class=\"comment\">/*允许出现的最大号码长度*/</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAX_ADDRESSES 1000<span class=\"comment\">/*允许出现的字多地址个数*/</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 给出一个名字，查找对应的地址</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span> <span class=\"keyword\">const</span> *</div><div class=\"line\"><span class=\"title\">lookup_address</span><span class=\"params\">(<span class=\"keyword\">char</span> <span class=\"keyword\">const</span> *name)</span></span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 给出一个名字，查找对应号码</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span> <span class=\"keyword\">const</span> *</div><div class=\"line\"><span class=\"title\">lookup_phone</span><span class=\"params\">(<span class=\"keyword\">char</span> <span class=\"keyword\">const</span> *name)</span></span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">//CHAPTER07_FUNC_ADDRLIST_H</span></span></div></pre></td></tr></table></figure>\n\n`addresslist.c`\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 用于维护一个列表的抽象数据类型</div><div class=\"line\"> */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"addrlist.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 每个地址的三个部分，分别保存在数组的对应元素中</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">char</span> name[MAX_ADDRESSES][NAME_LENGTH] = &#123;<span class=\"string\">\"1\"</span>, <span class=\"string\">\"2\"</span>, <span class=\"string\">\"3\"</span>&#125;;</div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">char</span> address[MAX_ADDRESSES][ADDR_LENGTH] = &#123;<span class=\"string\">\"4\"</span>, <span class=\"string\">\"5\"</span>, <span class=\"string\">\"6\"</span>&#125;;</div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">char</span> phone[MAX_ADDRESSES][PHONE_LENGTH] = &#123;<span class=\"string\">\"7\"</span>, <span class=\"string\">\"8\"</span>, <span class=\"string\">\"9\"</span>&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">** 这个函数在数组中查找一个名字并返回对应下标</div><div class=\"line\">**/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">find_entry</span><span class=\"params\">(<span class=\"keyword\">char</span> <span class=\"keyword\">const</span> *name_to_find)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> entry;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> entry = <span class=\"number\">0</span>; entry &lt; MAX_ADDRESSES; ++entry) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(name_to_find, name[entry]) == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> entry;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span> <span class=\"keyword\">const</span> *</div><div class=\"line\"><span class=\"title\">lookup_address</span><span class=\"params\">(<span class=\"keyword\">char</span> <span class=\"keyword\">const</span> *name)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> entry;</div><div class=\"line\">    entry = find_entry(name);</div><div class=\"line\">    <span class=\"keyword\">if</span> (entry == <span class=\"number\">-1</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> address[entry];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span> <span class=\"keyword\">const</span> *</div><div class=\"line\"><span class=\"title\">lookup_phone</span><span class=\"params\">(<span class=\"keyword\">char</span> <span class=\"keyword\">const</span> *name)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> entry;</div><div class=\"line\">    entry = find_entry(name);</div><div class=\"line\">    <span class=\"keyword\">if</span> (entry == <span class=\"number\">-1</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> phone[entry];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</code></pre><ol>\n<li>黑盒的功能是通过规定的接口访问，在这个例子里，接口是 <code>lookup_address</code> 和 <code>lookup_phone</code>。但是用户不能访问模块实现相关的数据，如数组和辅助函数 <code>find_entry</code>,因为这些内容被声明为 <code>static</code> 。</li>\n</ol>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cj0j2it040000p8utan44n1xy","tag_id":"cj0j2it0r0001p8ut05uzyttq","_id":"cj0j2it100002p8utmbsbxf79"}],"Tag":[{"name":"读书笔记","_id":"cj0j2it0r0001p8ut05uzyttq"}]}}